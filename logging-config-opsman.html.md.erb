---
title: Configuring logging in Tanzu Platform for Cloud Foundry
owner: APM
---

<%= vars.app_runtime_first %> generates many logs. Learn about the log types and how to forward system logs to an
external aggregator service, how to scale Loggregator component VMs to keep up with app log volume, and how to manage app
traffic logging.

For more information about Loggregator components, see [Loggregator architecture](../loggregator/architecture.html).


## <a id='types'></a> System logs, app logs, app traffic logs

<%= vars.app_runtime_abbr %> generates two types of logs, _system logs_ from <%= vars.app_runtime_abbr %> components and _app logs_ from hosted apps, as differentiated in the table below:

<table class="table" >
  <thead><tr>
    <th>Log type</th>
    <th>Originate from</th>
    <th>Follow format</th>
    <th>Stream from</th>
    <th>Can stream out to (configurable)</th>
    <th>Visible to</th>
  </tr></thead>
  <tr>
    <th>System logs</th>
    <td>Platform components</td>
    <td>Syslog standard</td>
    <td>rsyslog agent</td>
    <td>Component syslog drain</td>
    <td>Operators</td>
  </tr><tr>
    <th rowspan=3>App logs</th>
    <td rowspan=3>Hosted apps</td>
    <td>Format is up to the developer</td>
    <td>Firehose<sup>1</sup></td>
    <td>External data platform, optionally by using nozzles</td>
    <td rowspan=3>Developers and Operators</td>
  </tr><tr>
    <td bgcolor="#FBFBFB">Converted to syslog standard</td>
    <td bgcolor="#FBFBFB">Syslog Agent</td>
    <td bgcolor="#FBFBFB">External syslog drain</td>
  </tr>
</table>

<sup>1</sup>The Loggregator Firehose also streams component metrics.

**App traffic logs are system logs.** When app containers communicate, or attempt to communicate, their host Diego Cells generate _app traffic logs_. App traffic logs are system logs, not app logs. These logs come from host Diego Cells, not apps, and they carry no information from within the app. App traffic logs only show app communication behavior, as detected from outside by the host Diego Cell.


## <a id="log-cache"></a> Log cache

Log Cache is a Loggregator feature that you can filter and query app logs through a CLI plug-in or API endpoints. Cached app logs
are available on demand. You do not need to stream them continuously.

### <a id="log-cache-cli-examples"></a> Example uses of the Log Cache CLI plug-in

To access cached logs with the Log Cache CLI plug-in, you must first download and install the plug-in.

To download the Log Cache CLI plug-in, see the [cf CLI plug-ins](https://plugins.cloudfoundry.org/#log-cache) page on the Cloud Foundry website.

After you have installed the plug-in, the basic command to access cached app logs is:

```
cf tail OPTIONS APP-NAME-OR-ID
```

Where:

* `OPTIONS` are the flags you use to filter app logs.
* `APP-NAME-OR-ID` is the name or source ID of your app.

Some flags you can use Log Cache to filter app logs are:

* `--start-time`: Displays the start of the cache or the start of a time period you specify. Results display as a UNIX timestamp, in nanoseconds. Pair with `--end-time` to view logs within a time period.

* `--end-time`: Displays the end of the cache or the end of a time period you specify. Results display as a UNIX timestamp, in nanoseconds. Pair with `--start-time` to view logs within a time period.

* `--json`: Output logs in JSON.

* `--follow`: Append exported logs to `stdout`.

For more information about using the Log Cache CLI, see [Log Cache CLI: Usage](https://github.com/cloudfoundry/log-cache-cli/blob/develop/README.md) on GitHub.

### <a id="log-cache-api-examples"></a> Example uses of the Log Cache API

The Log Cache API is hosted on <%= vars.app_runtime_abbr %>, and references your system domain to return responses. The root URL for API calls is `https://log-cache.SYSTEM-DOMAIN`, where `SYSTEM-DOMAIN` is your system domain.

The basic call to access and filter cached app logs is:

```
GET https://log-cache.SYSTEM-DOMAIN/v1/read/APP-ID
```

Where:

* `SYSTEM-DOMAIN` is your system domain.
* `APP-ID` is the source ID of your app.

Append the following parameters to your `GET` call to customize app logs:

* `start_time`: Displays the start of the cache or the start of a time period you specify. Results display as a UNIX timestamp, in nanoseconds. Pair with `end_time` to view logs within a time period.

* `end_time`: Displays the end of the cache or the end of a time period you specify. Results display as a UNIX timestamp, in nanoseconds. Pair with `start_time` to view logs within a time period.

* `envelope_types`: Filters by Envelope Type. The available filters are: `LOG`, `COUNTER`, `GAUGE`, `TIMER`, and `EVENT`. Set an envelope type filter to emit logs of only that type. Specify this parameter multiple times to include more types.

* `limit`: Sets a maximum number of envelopes to request. The max limit is 1000. This value defaults to 100.

More API parameters are available to customize retrieved app logs. For more information, see [Log Cache: RESTful API Gateway](https://github.com/cloudfoundry/log-cache#restful-api-via-gateway).


## <a id='syslog-forward'></a> Activate syslog forwarding

<%# Find this partial in GitHub at `pivotal-cf/docs-partials` %>

<%= partial "/pcf/core/system_logging" %>


## <a id='scaling'></a> Scale Loggregator Firehose system

Apps constantly generate app logs and <%= vars.app_runtime_abbr %> platform components constantly generate component metrics. The Loggregator Firehose system combines these data streams and handles them as follows. For more information, see [Loggregator Firehose Architecture](../loggregator/architecture.html#loggregator-firehose-architecture-1).

* The Loggregator agent running on each component or app VM collects and sends this data out to Doppler components.

* Doppler components temporarily buffer the data before periodically forwarding it to the Traffic Controller. When the log and metrics data input to a Doppler exceeds its buffer size for a given interval, data can be lost.

* The Traffic Controller / Reverse Log Proxy serve the aggregated data stream to clients.

Use the following instructions to scale the Loggregator Firehose system. For guidance on monitoring and capacity planning, see [Monitoring <%= vars.app_runtime_abbr %>](https://docs.vmware.com/en/VMware-Tanzu-Application-Service/<%= vars.current_major_version %>/tas-for-vms/monitoring-index.html).

### <a id="instances"></a> Add component VM instances

To add component VM instances for Loggregator components:

1. Go to the <%= vars.ops_manager %> Installation Dashboard.

2. Click the <%= vars.app_runtime_abbr %> tile.

3. Select **Resource Config**.

4. Increase the number in the **Instances** column of the component you want to scale. You can add instances for the following Loggregator components:
  * **Loggregator Trafficcontroller**
  * **Doppler Server**
  * **Log Cache**

5. Click **Save**.

6. Return to the <%= vars.ops_manager %> Installation Dashboard.

7. Click **Review Pending Changes**.

8. Click **Apply Changes**.

## <a id='scaling-shared-nothing'></a> Scale Loggregator Shared Nothing system

<%= vars.company_name %> recommends the newer Shared Nothing logging and metrics architecture as an alternative to the Loggregator Firehose architecture.

The Shared Nothing architecture egresses logs and metrics from the platform directly from each VM as opposed to the more centralized approach of the Loggregator Firehose architecture.
Egressing directly from the VMs where logs and metrics are generated has better scaling characteristics, may reduce costs and should be preferred for new deployments.

For more information, see [Shared Nothing Architecture](../loggregator/architecture.html#sharednothing-architecture-2).

* The Syslog agent running on each component or app VM collects and sends this data out to Log Cache and any configured external syslog destination.

* The OpenTelemetry Collector (beta) running on each component or app VM egresses metrics via the configured exporters.

When using the Shared Nothing architecture you can potentially scale down the VMs associated with the Loggregator Firehose architecture. See [Scaling down Logging and Metrics infrastructure](config-resources.html#scale-down-logging) for more information.


## <a id="app-traffic-log"></a> App traffic logging

App traffic logging generates logs when app containers communicate with each other directly, or attempt to communicate, by container-to-container networking (C2C) policies and App Security Groups (ASGs). For more information about C2C policies, see [Container-to-Container Networking versus ASGs](../concepts/understand-cf-networking.html#c2cvsasg) in _Container-to-Container Networking_. For more information about ASGs, see [App Security Groups](../concepts/asg.html).

With App traffic logging, network security teams audit C2C traffic, by seeing allowed and denied packets, without needing access to the Cloud Controller or the apps themselves.

### <a id="enable-app-traffic-log"></a> Activate app traffic logging

To activate app traffic logging:

1. Go to the <%= vars.ops_manager %> Installation Dashboard.

1. Click the <%= vars.app_runtime_abbr %> tile.

1. Select the **Networking** pane.

1. Activate the **Log traffic for all accepted and denied app packets** check box.

1. Click **Save**.

1. Return to the <%= vars.ops_manager %> Installation Dashboard.

1. Click **Review Pending Changes**.

1. Click **Apply Changes**.

### <a id="log-behavior"></a> App logging behavior

App traffic logging generates log messages as follows:

* **TCP traffic:** Logs the first packet of every new TCP connection.

* **UDP traffic:** Logs UDP packets sent and received, up to a maximum per-second rate for each container. Set this rate limit in the **UDP logging interval** field in the **Networking** pane of the <%= vars.app_runtime_abbr %> tile. The default rate limit is `100` packets per second.

* **Packets denied:** Logs packets blocked by either a container-specific networking policy or by ASG rules applied across the space, org, or deployment. Logs packet denials up to a maximum per-second rate for each container, set in the **Denied logging interval** field in the **Networking** pane of the <%= vars.app_runtime_abbr %> tile. The default rate is `1` (packet per second). For more information about container-specific networking policies, see [Policies](../concepts/understand-cf-networking.html#policies) in _Container-to-Container Networking_.

### <a id="log-format"></a> App traffic log format and contents

App traffic logs are formatted as described in the [silk-release Traffic logging](https://github.com/cloudfoundry/silk-release/blob/develop/docs/04-traffic-logging.md) documentation, following the `iptables-logger` format but without line breaks.

For example, the first part of an app traffic log line looks like:

`{"timestamp": "2020-06-23T11:36:01.710452019Z", "source": "cfnetworking.iptables", "message": "cfnetworking.iptables.ingress-allowed", "log_level": 1, "data": { "destination": { "container_id": "d5978989-1401-49ff-46cd-33e5","app_guid": "bc6f229d-5e4a-4c41-a63f-e8795496c283",`.

Each log message includes:

* A timestamp, either in RFC3339 format or in epoch format. The format depends upon the configuration of the **Timestamp format for component logs** in the **System Logging** pane of the <%= vars.app_runtime_abbr %> tile

* The GUID for the source or destination app that sent or was designated to receive the packet

* The protocol of the communication, `TCP` or `UDP`

* GUIDs for the container, space, and org running the source or destination app

* IP addresses and ports for both source and destination apps

* A `message` field recording whether the packet was allowed or denied, with one of the following four possibilities:
  * `ASG allowed packet to exit source app container`
  * `C2C policy allowed packet to enter destination app container`
  * `ASG prevented packet from exiting source app container`
  * `C2C policy prevented packet from entering destination app container`

* Additional information described in the [silk-release](https://github.com/cloudfoundry/silk-release/blob/develop/docs/04-traffic-logging.md) documentation

#### <a id="denied-packet"></a> Causes of denied packet

You can determine whether a denied-packet log results from a container networking policy or an ASG rule as follows:

* **Container networking policy:** Log `message` string includes `ingress-denied` and `packet direction` is `ingress`.

* **ASG rule:** Log `message` string includes `egress-denied` and `packet direction` is `egress`.

### <a id="scope-app-traffic-log"></a> Global vs. ASG-level app traffic logging

<%= vars.app_runtime_abbr %> supports two mechanisms for enabling app traffic logging. Enabling the **Log traffic for all accepted and denied app packets** check box in the **Networking** pane of the <%= vars.app_runtime_abbr %> tile activates app traffic logging globally for all ASGs and container policies. Setting the `log` property of an ASG to `true` activates app traffic logging at the individual ASG level. For more information about setting the `log` property of an ASG to `true`, see [The Structure and Attributes of ASGs](../concepts/asg.html#creating-groups) in _App Security Groups_.

Because these two mechanisms operate independently, <%= vars.app_runtime_abbr %> generates duplicate logs when app traffic logging is activated globally and an ASG's `log` property is set to `true`. To avoid duplicate logs, <%= vars.company_name %> recommends setting the `log` property to `false` for all ASGs, or leaving it out entirely, when app traffic logging is activated globally. For more information, see [App Traffic Logging](#app-traffic-log).

To focus on specific ASGs for log analysis, <%= vars.company_name %> recommends enabling app traffic logs globally and using a logging platform to filter traffic logs by ASG, rather than setting `log` at the individual ASG level.
