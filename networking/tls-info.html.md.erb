---
title: TLS Connections in TAS for VMs
owner: Security
---


This topic describes the different paths through which external clients, internal components, app containers, and app services communicate in <%= vars.app_runtime_first %>, and how the platform uses Transport Layer Security (TLS) protocols to secure these communications.


## <a id="tls-types"></a> Types of Network Communication in <%= vars.app_runtime_abbr %>

This section describes the different types of network communication in <%= vars.app_runtime_abbr %> and how they are secured with TLS.

Within an <%= vars.app_runtime_abbr %> deployment, TLS secures connections between components like the BOSH Director and Service instances. <%= vars.app_runtime_abbr %> components also use TLS connections to secure communications with external hardware, such as customer load balancers.

### <a id="client-to-app"></a> Between an External Client and an App

The following diagram illustrates the flow of communication from a client making a request to an app:

<%= image_tag("ingress-traffic.png", :class => "no-border") %>
[//]: https://docs.google.com/drawings/d/1gMYrcGpr-srWAv-ZvCs-9UHaV0JG2jpbre5cG2XoLRg/edit?usp=sharing

The following table describes each component involved in receiving a client request and where their certificates for TLS termination originate:

| Component | Certificate Source |
| --------- | ------------------ |
| External Load Balancer | Enterprise root certificate authority (CA). |
| Gorouter | Enterprise root CA. |
| App | <%= vars.ops_manager %> root CA dedicated to app instance identity. For more information, see [App Instance Container Identity Credentials](#container-creds). |

### <a id="component-to-component"></a> Between Platform Components

The following diagram illustrates communication between platform components, secured with TLS:

<%= image_tag("platform-components.png", :class => "no-border") %>
[//]: https://docs.google.com/drawings/d/1Nr9dRH72PphVq_iW23yceqq2lzrR4mGvpWdTItTQuqU/edit?usp=sharing

The CredHub instance in BOSH generates certificates for all components in <%= vars.ops_manager %>. The certificates are self-signed by default. To issue certificates signed by your enterprise, you can add a custom CA to CredHub.

<p class="note"><strong>Note:</strong> Traffic between the Gorouter and Windows stemcells is not encrypted with TLS.</p>

#### <a id="components"></a> Component Communication Details

These topics list the paths, ports, and protocols that subsystems within <%= vars.app_runtime_abbr %> use to communicate:

* [Cloud Controller Network Communications](cc-network-paths.html)

* [Diego Network Communications](diego-network-paths.html)

* [Loggregator Network Communications](loggregator-network-paths.html)

* [MySQL Network Communications](mysql-network-paths.html)

* [NATS Network Communications](nats-network-paths.html)

* [Routing Network Communications](routing-network-paths.html)

* [UAA Network Communications](uaa-network-paths.html)

### <a id="app-to-app"></a> Between Apps

The following diagram illustrates TLS communications between apps running on <%= vars.app_runtime_abbr %>:

<%= image_tag("between-app-traffic.png", :class => "no-border") %>
[//]: https://docs.google.com/drawings/d/1h4x8vNf2xiCZMVpFLb11Dx-PmMmcYOMWBHAHfbzNbUQ/edit?usp=sharing

In this example, the `frontend-blue` and `frontend-green` apps both receive client requests, but only the `frontend-green` app is allowed to communicate with the `backend` app.

Apps can communicate with each other over TLS using certificates generated by an <%= vars.ops_manager %> root CA dedicated to app instance identity. For more information, see [App Instance Container Identity Credentials](#container-creds).

Developers specify which apps are allowed to communicate using container networking policies. For more information, see [Configuring Container-to-Container Networking](https://docs.vmware.com/en/VMware-Tanzu-Application-Service/<%= vars.current_major_version %>/tas-for-vms/deploy-apps-cf-networking.html).

### <a id="app-to-service"></a> Between Apps and On-Platform Services

The following diagram illustrates TLS communication between apps and managed, on-platform services. It uses Cloud Cache as an example of a managed service.

<%= image_tag("apps-services.png", :class => "no-border") %>
[//]: https://docs.google.com/drawings/d/16WDbrSCLR9-avP0-DvnsJHwDG3tc8vMJTNiU-6rFLNo/edit?usp=sharing

BOSH CredHub issues certificates to the VMware Tanzu GemFire components. For the app, the developer must retrieve a copy of this certificate using the CredHub API and place it in the trust store for the app. For more information, see the [VMware Tanzu GemFire documentation](https://docs.vmware.com/en/VMware-GemFire-for-Tanzu-Application-Service/1.14/gf-tas/content-index.html).

Separately, <%= vars.app_runtime_abbr %> Runtime CredHub might store credentials for the app to access a service over the TLS connection, adding a second layer of security. For more information, see [Securing Services Instance Credentials with Runtime CredHub](https://docs.vmware.com/en/VMware-Tanzu-Application-Service/<%= vars.current_major_version %>/tas-for-vms/secure-si-creds.html).

### <a id="app-to-external-service"></a> Between Apps and External Services

The following diagram illustrates communications between apps and external, brokered services secured with TLS:

<%= image_tag("apps-external-services.png", :class => "no-border") %>
[//]: https://docs.google.com/drawings/d/1pUQUeC9_XBq_wTJu6Ws0vPTPO8Xz4FQfqj5PRflQ5_M/edit?usp=sharing

The developer must retrieve the certificate from the external service and provide it to their app. One way to do this is by placing the certificate in Runtime CredHub and modifying your app to consume the certificate through CredHub Service Broker. For more information, see the [CredHub Service Broker](https://docs.pivotal.io/credhub-service-broker/) documentation.


## <a id="container-creds"></a> App Instance Container Identity Credentials

Each app instance container in <%= vars.app_runtime_abbr %> has its own identity credentials. This section describes how to understand and use these credentials.

### <a id="cred-details"></a> About App Instance Identity Credentials

To learn about app instance identity credentials, see the following table:

<table>
  <tr>
    <th style="width: 20%">Attribute</th>
    <th>Description</th>
  </tr>
  <tr>
    <th>Purpose</th>
    <td>
      <ul>
        <li>For app developers to enable secure TLS communications from their apps.</li>
        <li>For <%= vars.ops_manager %> to use internally to validate the identities of app instances.</li>
      </ul>
    </td>
  </tr>
  <tr>
    <th>Type</th>
    <td>
      <ul>
        <li>A PEM-encoded <a href="https://tools.ietf.org/html/rfc5280">X.509</a> certificate and <a href="https://tools.ietf.org/html/rfc3447">PKCS #1 RSA</a> private key.</li>
      </ul>
    </td>
  </tr>
  <tr>
    <th>Location</th>
    <td>
      <ul>
        <li><%= vars.ops_manager %> presents the certificate and private key to the app instance through the container filesystem.</li>
      </ul>
    </td>
  </tr>
  <tr>
    <th>Properties of certificate</th>
    <td>
      <ul>
        <li>The <strong>Common Name</strong> is the app instance GUID.</li>
        <li>The <strong>Subject</strong> of the certificate contains an <em>Organizational Unit</em> in the form of <code>app:APP-GUID</code>, where <code>APP-GUID</code> is the app instance GUID.</li>
        <li>The certificate contains a <strong>Subject Alternative Name</strong> (SAN) with the IP address for the app instance container.</li>
        <li>The certificate is valid for 24 hours after being issued.</li>
      </ul>
    </td>
  </tr>
  <tr>
    <th>Contents of certificate file</th>
    <td>
      <ul>
        <li>A chain of PEM-encoded certificates, with the instance-specific certificate first in the list and any intermediates following it.</li>
      </ul>
    </td>
  </tr>
  <tr>
    <th>Issuing authority</th>
    <td>
      <ul>
        <li><%= vars.ops_manager %> includes a root CA dedicated to app instance identity. This CA is saved in the system trust store for buildpack-based apps and in a file in <code>/etc/cf-system-certificates</code> in all app instance containers.</li>
      </ul>
    </td>
  </tr>
</table>

### <a id="use-creds"></a> Using the Credentials

If you want to enable secure TLS communications from an app using container instance identity credentials, ensure that you:

* **Add the credentials to your development stack configuration:** The credentials must be present in your development stack configuration for your app to use them. You can retrieve the credentials through following environment variables, which <%= vars.ops_manager %> sets to the locations of key and certificate files.
    <table id='instance-certs' border="1" class="nice" >
      <tr>
        <th>Credential/Keypair Element</th>
        <th>Environment Variable</th>
        <th>Command to Retrieve Credential Value</th>
      </tr>
      <tr>
        <td>Certificate Chain</td>
        <td><code>CF_INSTANCE_CERT</code></td>
        <td><code>cf ssh APP-NAME -c 'cat $CF_INSTANCE_CERT'</code></td>
      </tr>
      <tr>
        <td>Private Key</td>
        <td><code>CF_INSTANCE_KEY</code></td>
        <td><code>cf ssh APP-NAME -c 'cat $CF_INSTANCE_KEY'</code></td>
      </tr>
    </table>
    Where `APP-NAME` is the name of your app.

* **Reload the credential files before they expire:** <%= vars.ops_manager %> rotates the credentials shortly before the current certificate expires. Apps that use these credentials must reload the certificate and key file contents either periodically or in reaction to filesystem watcher events.

* **Configure external clients or servers to trust the root CA:** To enable secure TLS communication between an app and a client or server external to <%= vars.ops_manager %>, you must configure the external client or server to trust the CA that issues app instance container identity credentials. For more information, see the _Issuing Authority_ row of the table in [About App Instance Identity Credentials](#cred-details).

### <a id="more-info"></a> Additional Information

For more information about instance identity credentials, see [Instance Identity](https://github.com/cloudfoundry/diego-release/blob/develop/docs/instance-identity.md) in the diego-release repository on GitHub.


## <a id="ciphers"></a> TLS Cipher Suites

By default, <%= vars.ops_manager %> uses a limited set of cipher suites to secure its internal communications. However, some components used in <%= vars.ops_manager %>, like the Gorouter, may support additional TLS cipher suites to accommodate older clients outside of <%= vars.ops_manager %>.

<p class="note"><strong>Note:</strong> The AWS Classic load balancer does not support the recommended TLS cipher suites. For details and mitigations, see <a href="https://docs.vmware.com/en/VMware-Tanzu-Application-Service/<%= vars.current_major_version %>/tas-for-vms/securing-traffic.html#ciphers">TLS Cipher Suite Support</a> in <em>Securing Traffic into <%= vars.app_runtime_abbr %></em>.</p>

For components that allow you to configure TLS cipher suites, only specify the TLS cipher suites that you need.

### <a id="cipher_recs"></a> TLS Cipher Suite Recommendations

The default version of TLS is TLS v1.2. <%= vars.company_name %> recommends using this version.

The TLS cipher suites <%= vars.company_name %> recommends using within <%= vars.ops_manager %> are:

* TLS\_DHE\_RSA\_WITH\_AES\_128\_GCM\_SHA256
* TLS\_DHE\_RSA\_WITH\_AES\_256\_GCM\_SHA384
* TLS\_ECDHE\_RSA\_WITH\_AES\_128\_GCM\_SHA256
* TLS\_ECDHE\_RSA\_WITH\_AES\_256\_GCM\_SHA384

### <a id="cipher_gorouter"></a> Gorouter Configuration

As part of your <%= vars.app_runtime_abbr %> networking configuration, you must specify the TLS cipher suites that the Gorouter uses to secure its communications. Only specify the cipher suites that you need.

The TLS cipher suites <%= vars.company_name %> recommends for the Gorouter are:

* ECDHE-RSA-AES128-GCM-SHA256
* ECDHE-RSA-AES256-GCM-SHA384

You can specify other cipher suites and a different minimum version of TLS support if your deployment requires it. For a list of other cipher suites and other versions of TLS that are optionally supported by the Gorouter, see [TLS Cipher Suite Support](https://docs.vmware.com/en/VMware-Tanzu-Application-Service/<%= vars.current_major_version %>/tas-for-vms/securing-traffic.html#ciphers) in _Securing Traffic into <%= vars.app_runtime_abbr %>_.

For instructions on how to configure the TLS cipher suites for the Gorouter, see [Configure Networking](https://docs.vmware.com/en/VMware-Tanzu-Application-Service/<%= vars.current_major_version %>/tas-for-vms/configure-pas.html#networking) in _Configuring <%= vars.app_runtime_abbr %>_.
